import { Button, Divider, Select } from "@chakra-ui/react";
import { motion } from "framer-motion";
import Head from "next/head";
import React, { useEffect, useState } from "react";

import Rule from "@/components/Community/Rule";
import EditorLarge from "@/components/editor/EditorLarge";
import { RootState } from "@/redux/store";
import { useRouter } from "next/router";
import { useSelector } from "react-redux";
import { postingGroup } from "../../../apis/posts";
import PageContent from "../../components/Layout/PageContent";
import useCommunityData from "../../hooks/useCommunityData";
type Posting = {
  content: string;
  time: Date;
  userId: number;
  groupId: number;
  titles: string;
};

const Page: React.FC = () => {
  const user = useSelector((state: RootState) => state.userInfor.currentUser);
  const [htmlString, setHtmlStringg] = useState<string>("");
  const { communityStateValue } = useCommunityData();
  const [group, setGroup] = useState(-1);
  const router = useRouter();
  const handlePost = async () => {
    if (group == -1 || group == 0) return;
    try {
      let post: Posting = {
        content: htmlString,
        time: new Date(),
        userId: user.userId,
        groupId: group,
        titles: "",
      };
      await postingGroup(post);
      router.push(`/group/${group}`);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    console.log(group);
    console.log("strinsadasdada" + htmlString);
  }, [group]);
  return (
    <motion.div
      initial={{ opacity: 0 }}
      whileInView={{ opacity: 1 }}
      viewport={{ once: true }}
    >
      <Head>
        <title>Camp scholar</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/images/header.png" />
      </Head>
      <PageContent>
        <div className="w-[100%]">
          <Select
            placeholder="Select option"
            background={"whiteAlpha.800"}
            fontStyle={"bold"}
            onChange={(e) => setGroup(Number(e.target.value))}
          >
            {communityStateValue.mySnippets.map((snippet) => (
              <option value={snippet.groupId}>
                {" "}
                Group : {snippet.groupName}
              </option>
            ))}
          </Select>
          {user && (
            <>
              {" "}
              <EditorLarge
                formTitle=""
                htmlString={htmlString}
                setHtmlString={setHtmlStringg}
                pageName="create_blog"
              ></EditorLarge>
            </>
          )}
        </div>
        <div className="flex flex-col fixed ">
          <Rule />
          <Divider />
          <Button
            colorScheme="teal"
            variant="solid"
            disabled={group == -1 || group == 0 ? true : false}
            onClick={() => handlePost()}
          >
            {group == -1 || group == 0 ? "Hãy chọn group" : "Đăng ngay"}
          </Button>
        </div>
      </PageContent>
    </motion.div>
  );
};
export default Page;
