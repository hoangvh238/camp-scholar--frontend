import { Stack } from "@chakra-ui/react";
import { motion } from "framer-motion";
import Head from "next/head";
import { useEffect, useState } from "react";

import PostOpen from "@/components/posts/PostOpen";
import { RootState } from "@/redux/store";
import { useSelector } from "react-redux";
import { getCurrentPost } from "../../../../apis/posts";
import { Post } from "../../../atoms/PostAtom";
import PostLoader from "../../../components/posts/PostLoader";
import useCommunityData from "../../../hooks/useCommunityData";
import usePosts from "../../../hooks/usePosts";
// import Comments from "@/components/posts/Comments2/Comments";

import CommentContent from "@/components/Layout/CommentContent";
// import CommentRule from "@/components/posts/Comments2/CommentRule";
import CommentRule from "@/components/Community/Rule copy";
import { useRouter } from "next/router";

export default function Page() {
  const user = useSelector((state: RootState) => state.userInfor.currentUser);
  const router = useRouter();

  const [loading, setLoading] = useState(false);
  const [currenVote, setCurrenVote] = useState(0);
  const [total, setTotal] = useState(0);
  const postID = Number(router.query.id?.toString());

  const {
    postStateValue,
    setPostStateValue,
    onDeletePost,
    onSelectPost,
    onVote,
  } = usePosts();
  const { communityStateValue } = useCommunityData();

  const [selectedPost, setSelectedPost] = useState<Post | null>(null);

  const buildPost = async () => {
    setLoading(true);
    try {
      const res = await getCurrentPost(postID);
      setSelectedPost(res.data.data);

      setLoading(false);
    } catch (error) {
      console.error("Building Home Error", error);
    }
  };

  useEffect(() => {
    if(!postID) return;
    buildPost();
  }, [postID]);

  useEffect(() => {
    if (!selectedPost) return;
    console.log("hihihihi");
    
    console.log(selectedPost);
    
    const votesAmt = selectedPost.likes
      ? selectedPost.likes.reduce((acc, vote) => {
          if (vote.status === 1) return acc + 1;
          if (vote.status === -1) return acc - 1;
          return acc;
        }, 0)
      : 0;

    const currentVote = selectedPost.likes?.find(
      (like) => like.auth === user?.userName,
    );
    console.log("day ne"+currenVote);
    console.log("nua ne"+votesAmt);
    
  
    setTotal(votesAmt);

    if (currentVote)
    setCurrenVote(currentVote.status);

  }, [selectedPost]);
  

  return (
    <motion.div
      initial={{ opacity: 0 }}
      whileInView={{ opacity: 1 }}
      viewport={{ once: true }}
    >
      <Head>
        <title>Camp Scholar</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/images/header.png" />
      </Head>
      <CommentContent>
        <>
          {loading ? (
            <PostLoader />
          ) : (
            <Stack>
              {selectedPost && (
                <PostOpen
                  key={selectedPost.postId}
                  post={selectedPost}
                  userIsCreator={user?.userName === selectedPost.author}
                  userVoteValue={currenVote}
                  onVote={onVote}
                  onSelectPost={onSelectPost}
                  onDeletePost={onDeletePost}
                  votesAmt={total}
                  commentAmt={selectedPost.comments.length}
                />
              )}
            </Stack>
          )}
        </>
        <CommentRule></CommentRule>
        {/* <CommentRule /> */}
      </CommentContent>
    </motion.div>
  );
}
