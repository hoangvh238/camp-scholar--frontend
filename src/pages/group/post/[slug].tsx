import { Stack } from "@chakra-ui/react";
import {
  collection,
  getDocs,
  limit,
  orderBy,
  query,
  where,
} from "firebase/firestore";
import { motion } from "framer-motion";
import type { NextPage } from "next";
import Head from "next/head";
import { Key, useEffect, useState } from "react";
import { useAuthState } from "react-firebase-hooks/auth";

import { Post, Like } from "../../../atoms/PostAtom";
import CreatePostLink from "../../../components/Community/CreatePostLink";
import PersonalHome from "../../../components/Community/PersonalHome";
import Premium from "../../../components/Community/Premium";
import Recommendation from "../../../components/Community/Recommendation";
import PageContent from "../../../components/Layout/PageContent";
import PostItem from "../../../components/posts/PostItem";
import PostLoader from "../../../components/posts/PostLoader";
import useCommunityData from "../../../hooks/useCommunityData";
import usePosts from "../../../hooks/usePosts";
import { getAllPost } from "../../../../apis/posts";
import PostRead from "@/components/Post/Post";
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store";
import Survey from "@/components/Community/Survey";
import Rule from "@/components/Community/Rule";
import { getCookie } from "cookies-next";
import PostOpen from "@/components/posts/PostOpen";
// import Comments from "@/components/posts/Comments2/Comments";

import CommentContent from "@/components/Layout/CommentContent";
// import CommentRule from "@/components/posts/Comments2/CommentRule";
import { useRouter } from "next/router";
import CommentRule from "@/components/Community/Rule copy";
export default function Page() {

  const user = useSelector((state: RootState) => state.userInfor.currentUser);
  const router = useRouter();

  // const postId = 602; //Number(getCookie("post"));
  const [loading, setLoading] = useState(false);
  const [currenVote, setCurrenVote] = useState(0);
  const [total, setTotal] = useState(0);
  const [postId,setPostId] = useState(Number(router.query.slug?.toString()));
  
  
  const {
    postStateValue,
    setPostStateValue,
    onDeletePost,
    onSelectPost,
    onVote,
  } = usePosts();
  const { communityStateValue } = useCommunityData();

  const [selectedPost, setSelectedPost] = useState<Post | null>(null);

  const buildUserHomeFeed = async () => {
    setLoading(true);
    try {
      const postData = await getAllPost();
      const allPost = postData.data;
      const filteredPosts = allPost.filter((post: { postId: number; }) => post.postId === postId);
      setSelectedPost(filteredPosts.length > 0 ? filteredPosts[0] : null); // Set selectedPost
      setLoading(false);
    } catch (error) {
      console.error("Building Home Error", error);
    }
  }

  const getUserPostVotes = async () => {
    // Implement this function if needed
  };

  // useEffect(() => {
  //   if (communityStateValue.snippetsFetched) buildNoUserHomeFeed();
  // }, [communityStateValue.snippetsFetched]);

  useEffect(() => {
    buildUserHomeFeed();
  }, []);

  useEffect(() => {
    if (!selectedPost) return;
    const votesAmt = selectedPost?.likes ? selectedPost.likes.reduce((acc, vote) => {
      if (vote.status === 1) return acc + 1;
      if (vote.status === -1) return acc - 1;
      return acc;
    }, 0) : 0;

    const currentVote = selectedPost?.likes?.find((like) => like.auth === user?.userName);

    setTotal(votesAmt);
    if (!currentVote) return;
    setCurrenVote(currentVote.status);
  }, [selectedPost])


  console.log(postStateValue);


  return (
    <motion.div
      initial={{ opacity: 0 }}
      whileInView={{ opacity: 1 }}
      viewport={{ once: true }}
    >
      <Head>
        <title>Camp Scholar</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/images/header.png" />
      </Head>
      <CommentContent>
        <>
          {loading ? (
            <PostLoader />
          ) : (
            <Stack>
              {selectedPost && (

                <PostOpen
                  key={selectedPost.postId}
                  post={selectedPost}
                  userIsCreator={user?.userName === selectedPost.author}
                  userVoteValue={currenVote}
                  onVote={onVote}
                  onSelectPost={onSelectPost}
                  onDeletePost={onDeletePost}
                  votesAmt={total}
                  commentAmt={selectedPost.comments.length}
                />
              )}
            </Stack>
          )}



        </>
        <CommentRule></CommentRule>
        {/* <CommentRule /> */}
      </CommentContent>
    </motion.div>
  );

}
